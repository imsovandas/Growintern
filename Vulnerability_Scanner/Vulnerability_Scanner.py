import requests
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def scan_web_app(url):
    """
    Scans a web application for common vulnerabilities and returns a report
    :param url: The URL of the web application
    :return: A report of the vulnerabilities found
    """
    report = {"vulnerabilities": []}

    # Check for SQL injection vulnerabilities
    for injection in [
        "'+OR+1=1--",
        "' OR 1=1 #",
        "' UNION SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 --",
        "' AND 1=1 --",
    ]:
        try:
            response = requests.get(f"{url}/{injection}", verify=False, timeout=5)
            if response.status_code == 200:
                report["vulnerabilities"].append({
                    "name": "SQL Injection",
                    "description": f"Found SQL injection vulnerability using '{injection}'",
                    "severity": "high",
                    "solution": "Sanitize user input to prevent SQL injection attacks",
                })
        except:
            pass

    # Check for cross-site scripting (XSS) vulnerabilities
    for xss in ["<script>alert('XSS')</script>", "<script>prompt('XSS')</script>"]:
        try:
            response = requests.get(f"{url}/{xss}", verify=False, timeout=5)
            if response.status_code == 200:
                report["vulnerabilities"].append({
                    "name": "Cross-site Scripting (XSS)",
                    "description": f"Found XSS vulnerability using '{xss}'",
                    "severity": "medium",
                    "solution": "Sanitize user input to prevent XSS attacks",
                })
        except:
            pass

    # Check for out-of-date software
    try:
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"
        }
        response = requests.get(f"{url}/server-status", headers=headers, verify=False, timeout=5)
        if "Apache" in response.text:
            report["vulnerabilities"].append({
                "name": "Out-of-date Apache",
                "description": "Found out-of-date Apache server software",
                "severity": "medium",
                "solution": "Update Apache server software to the latest version",
            })
        elif "nginx" in response.text:
            report["vulnerabilities"].append({
                "name": "Out-of-date nginx",
                "description": "Found out-of-date nginx server software",
                "severity": "medium",
                "solution": "Update nginx server software to the latest version",
            })
    except:
        pass

    return report


if __name__ == "__main__":
    print(" ")
    print("------------------------- ")
    print("Vulnerability Scanner By Sovan Das")
    print("------------------------- ")
    print(" ")
    url = input("Enter the URL of the web application to scan: ")
    report = scan_web_app(url)
    print(" ")
    print("Vulnerability Report:")
    print(" ")
    for vuln in report["vulnerabilities"]:
        print(f"Name: {vuln['name']}")
        print(f"Description: {vuln['description']}")
        print(f"Severity: {vuln['severity']}")
        print(f"Solution: {vuln['solution']}")
        print()